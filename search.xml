<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Go语言学习笔记6-接口</title>
      <link href="/2021/12/02/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06-%E6%8E%A5%E5%8F%A3/"/>
      <url>/2021/12/02/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06-%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="接口">接口</h2><p>接口本事是调用方和是实现方均需要遵守的一种协议，大家按照统一的方法命名参数类型和数量来协调逻辑处理的过程<br>实现接口需遵循的条件：</p><ul><li>接口的方法与实现接口的类型方法格式必须一致</li><li>接口中的所有方法均要被实现</li></ul><blockquote><p>type 接口类型名 interface {<br>方法名1(参数列表1) 返回值列表1<br>方法名2(参数列表2) 返回值列表2<br>}</p></blockquote><ol><li>一个类型可以实现多个接口，接口间彼此独立</li><li>多个类型可以实现相同的接口，接口的方法可以通过在类型中嵌入其他类型或者结构体来实现</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s Service = <span class="built_in">new</span>(GameService)</span><br><span class="line">s.Start()</span><br><span class="line">s.Log(<span class="string">&quot;日志&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//定义接口</span></span><br><span class="line"><span class="keyword">type</span> Service <span class="keyword">interface</span> &#123;</span><br><span class="line">Start()</span><br><span class="line">Log(<span class="keyword">string</span>)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">type</span> logger <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//内嵌结构体实现接口Log</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g logger)</span> <span class="title">Log</span><span class="params">(l <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(l)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">type</span> GameService <span class="keyword">struct</span> &#123;</span><br><span class="line">logger</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//实现接口Start</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g GameService)</span> <span class="title">Start</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><ol start="3"><li>接口与接口间可以通过嵌套创造出新的接口</li><li>使用接口断言将接口转换成另外一个接口，也可以将接口转换成另外的类型<br><code>t := i.(T)</code><ul><li>i：接口变量</li><li>T：转换的目标类型</li><li>t：转换后的变量</li></ul></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">type</span> Flyer <span class="keyword">interface</span> &#123;</span><br><span class="line">Fly()</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">type</span> Walker <span class="keyword">interface</span> &#123;</span><br><span class="line">Walk()</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">type</span> Bird <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">type</span> Pig <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Pig)</span> <span class="title">Walk</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;walk&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Bird)</span> <span class="title">Walk</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;bird:walk&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Bird)</span> <span class="title">Fly</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;bird:flyer&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">animals := <span class="keyword">map</span>[<span class="keyword">string</span>] <span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">&quot;bird&quot;</span>: <span class="built_in">new</span>(Bird),</span><br><span class="line"><span class="string">&quot;pig&quot;</span>: <span class="built_in">new</span>(Pig),</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> name, obj := <span class="keyword">range</span> animals &#123;</span><br><span class="line">f, isFlyer := obj.(Flyer)</span><br><span class="line">w, isWalker := obj.(Walker)</span><br><span class="line">  </span><br><span class="line">fmt.Printf(<span class="string">&quot;name:%s, isFlyaer:%v, isWalker:%v\n&quot;</span>, name, isFlyer, isWalker)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> isFlyer &#123;</span><br><span class="line">f.Fly()</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> isWalker &#123;</span><br><span class="line">w.Walk()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>空接口是接口类型的特殊形式，空接口没有任何方法，因此任何类型都无须实现接口。因此空接口类型可以保存任何值，类型C#中的Object</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//使用空接口实现可以保存任何值的字典</span></span><br><span class="line"><span class="keyword">type</span> Dictionary <span class="keyword">struct</span> &#123;</span><br><span class="line">data <span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;] <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Dictionary)</span> <span class="title">Get</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line"><span class="keyword">return</span> d.data[key]</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Dictionary)</span> <span class="title">Set</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;, value <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">d.data[key] = value</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Dictionary)</span> <span class="title">Visit</span><span class="params">(callback <span class="keyword">func</span>(k, v <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">bool</span>)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> callback == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> d.data &#123;</span><br><span class="line"><span class="keyword">if</span> !callback(k, v) &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Dictionary)</span> <span class="title">Clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">d.data = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;] <span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewDictionary</span><span class="params">()</span> *<span class="title">Dictionary</span></span> &#123;</span><br><span class="line">d := &amp;Dictionary&#123;&#125;</span><br><span class="line">  </span><br><span class="line">d.Clear()</span><br><span class="line"><span class="keyword">return</span> d</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">dict := NewDictionary()</span><br><span class="line">  </span><br><span class="line">dict.Set(<span class="string">&quot;My Factory&quot;</span>, <span class="number">60</span>)</span><br><span class="line">dict.Set(<span class="string">&quot;Terra Craft&quot;</span>, <span class="number">36</span>)</span><br><span class="line">dict.Set(<span class="string">&quot;Don&#x27;t Hungry&quot;</span>, <span class="number">24</span>)</span><br><span class="line">  </span><br><span class="line">favorite := dict.Get(<span class="string">&quot;Terra Craft&quot;</span>)</span><br><span class="line">fmt.Println(favorite)</span><br><span class="line">  </span><br><span class="line">dict.Visit(<span class="function"><span class="keyword">func</span><span class="params">(k, v <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> v.(<span class="keyword">int</span>) &gt; <span class="number">40</span> &#123;</span><br><span class="line">fmt.Println(k, <span class="string">&quot;is expensive&quot;</span>)</span><br><span class="line"><span class="keyword">return</span>  <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">fmt.Println(k, <span class="string">&quot;is cheap&quot;</span>)</span><br><span class="line"><span class="keyword">return</span>  <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>使用<code>switch</code>可以判断一个接口内保存或实现的类型</li></ol><blockquote><p>switch 接口变量.(type) {<br>case 类型1:<br>//变量是类型1时的处理<br>case 类型2:<br>//变量是类型2时的处理<br>default:<br>//变量不是所有case中列举的类型时的处理<br>}</p></blockquote><ol start="7"><li>实现有限状态机</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line">  </span><br><span class="line"><span class="comment">//状态接口</span></span><br><span class="line"><span class="keyword">type</span> State <span class="keyword">interface</span> &#123;</span><br><span class="line">Name() <span class="keyword">string</span></span><br><span class="line">EnableSameTransit() <span class="keyword">bool</span></span><br><span class="line">OnBegin()</span><br><span class="line">OnEnd()</span><br><span class="line">CanTransitTo(name <span class="keyword">string</span>) <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//从状态实例获取状态名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StateName</span><span class="params">(s State)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> s == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;none&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">return</span> reflect.TypeOf(s).Elem().Name()</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//状态的基础信息和默认实现</span></span><br><span class="line"><span class="keyword">type</span> StateInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//状态名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *StateInfo)</span> <span class="title">Name</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> s.name</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//提供给内部设置名字</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *StateInfo)</span> <span class="title">setName</span><span class="params">(name <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">s.name = name</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//允许同状态转移</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *StateInfo)</span> <span class="title">EnableSameTransit</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span>  <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//默认将状态开启时实现</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *StateInfo)</span> <span class="title">OnBegin</span><span class="params">()</span></span> &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//默认将状态结束时实现</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *StateInfo)</span> <span class="title">OnEnd</span><span class="params">()</span></span> &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//默认可以转移到任何状态</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *StateInfo)</span> <span class="title">CanTransitTo</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//状态管理器</span></span><br><span class="line"><span class="keyword">type</span> StateManager <span class="keyword">struct</span> &#123;</span><br><span class="line">stateByName<span class="keyword">map</span>[<span class="keyword">string</span>]State<span class="comment">//已添加的状态</span></span><br><span class="line">onChange <span class="function"><span class="keyword">func</span><span class="params">(from, to State)</span>//状态改变时的回调</span></span><br><span class="line">cur State<span class="comment">//当前状态</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//根据名字获取指定状态</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sm *StateManager)</span> <span class="title">Get</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">State</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> v, ok := sm.stateByName[name]; ok &#123;</span><br><span class="line"><span class="keyword">return</span> v</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//添加一个状态到管理器中</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sm *StateManager)</span> <span class="title">Add</span><span class="params">(s State)</span></span> &#123;</span><br><span class="line">name := StateName(s)</span><br><span class="line">  </span><br><span class="line"><span class="comment">//将s装换为能设置名字的接口，然后调用该接口</span></span><br><span class="line">s.(<span class="keyword">interface</span>&#123;</span><br><span class="line">setName(name <span class="keyword">string</span>)</span><br><span class="line">&#125;).setName(name)</span><br><span class="line">  </span><br><span class="line"><span class="comment">//根据状态名获取已经添加的状态，检查改状态是否存在</span></span><br><span class="line"><span class="keyword">if</span> sm.Get(name) != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;duplicate state:&quot;</span> + name)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//根据名字保存到map中</span></span><br><span class="line">sm.stateByName[name] = s</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//初始化状态管理器</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewStateManager</span><span class="params">()</span> *<span class="title">StateManager</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;StateManager&#123;</span><br><span class="line">stateByName: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]State),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//定义错误</span></span><br><span class="line"><span class="keyword">var</span> ErrStateNotFound = errors.New(<span class="string">&quot;state not found&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> ErrForbidSameStateTransit = errors.New(<span class="string">&quot;forbid same state transit&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> ErrCannotTransitToState = errors.New(<span class="string">&quot;cannot transit to state&quot;</span>)</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sm *StateManager)</span> <span class="title">CurrState</span><span class="params">()</span> <span class="title">State</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> sm.cur</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sm *StateManager)</span> <span class="title">CanCurrTransitTo</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> sm.cur == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> sm.cur.Name() == name &amp;&amp; !sm.cur.EnableSameTransit() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">return</span> sm.cur.CanTransitTo(name)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//转移到指定状态</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sm *StateManager)</span> <span class="title">Transit</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">//获取目标</span></span><br><span class="line">next := sm.Get(name)</span><br><span class="line">  </span><br><span class="line"><span class="comment">//目标不存在</span></span><br><span class="line"><span class="keyword">if</span> next == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ErrStateNotFound</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//记录转移前的状态</span></span><br><span class="line">pre := sm.cur</span><br><span class="line">  </span><br><span class="line"><span class="comment">//当前有状态</span></span><br><span class="line"><span class="keyword">if</span> sm.cur != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">//相同的状态不用转换</span></span><br><span class="line"><span class="keyword">if</span> sm.cur.Name() == name &amp;&amp; !sm.cur.EnableSameTransit() &#123;</span><br><span class="line"><span class="keyword">return</span> ErrForbidSameStateTransit</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//不能转移到目标状态</span></span><br><span class="line"><span class="keyword">if</span> !sm.cur.CanTransitTo(name) &#123;</span><br><span class="line"><span class="keyword">return</span> ErrCannotTransitToState</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//结束当前状态</span></span><br><span class="line">sm.cur.OnEnd()</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//将当前状态切换为要转移到的目标状态</span></span><br><span class="line">sm.cur = next</span><br><span class="line"><span class="comment">//调用新状态的开始</span></span><br><span class="line">sm.cur.OnBegin()</span><br><span class="line">  </span><br><span class="line"><span class="comment">//通知回调</span></span><br><span class="line"><span class="keyword">if</span> sm.onChange != <span class="literal">nil</span> &#123;</span><br><span class="line">sm.onChange(pre, sm.cur)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//闲置状态</span></span><br><span class="line"><span class="keyword">type</span> IdleState <span class="keyword">struct</span> &#123;</span><br><span class="line">StateInfo</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *IdleState)</span> <span class="title">OnBegin</span><span class="params">()</span></span>  &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;idleState begin&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *IdleState)</span> <span class="title">OnEnd</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;idleState end&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//移动状态</span></span><br><span class="line"><span class="keyword">type</span> MoveState <span class="keyword">struct</span> &#123;</span><br><span class="line">StateInfo</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MoveState)</span> <span class="title">OnBegin</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;moveState begin&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MoveState)</span> <span class="title">OnEnd</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;moveState end&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MoveState)</span> <span class="title">EnableSameTransit</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span>  <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//跳跃状态</span></span><br><span class="line"><span class="keyword">type</span> JumpState <span class="keyword">struct</span> &#123;</span><br><span class="line">StateInfo</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(j *JumpState)</span> <span class="title">OnBegin</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;jumpState begin&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(j *JumpState)</span> <span class="title">CanTransitTo</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> name != <span class="string">&quot;MoveState&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sm := NewStateManager()</span><br><span class="line">  </span><br><span class="line"><span class="comment">//响应状态转移的通知</span></span><br><span class="line">sm.onChange = <span class="function"><span class="keyword">func</span><span class="params">(from, to State)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s--&gt; %s\n\n&quot;</span>, StateName(from), StateName(to))</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//添加3个状态</span></span><br><span class="line">sm.Add(<span class="built_in">new</span>(IdleState))</span><br><span class="line">sm.Add(<span class="built_in">new</span>(MoveState))</span><br><span class="line">sm.Add(<span class="built_in">new</span>(JumpState))</span><br><span class="line">  </span><br><span class="line"><span class="comment">//在不同状态间转移</span></span><br><span class="line">transitAndReport(sm, <span class="string">&quot;IdleState&quot;</span>)</span><br><span class="line">transitAndReport(sm, <span class="string">&quot;MoveState&quot;</span>)</span><br><span class="line">transitAndReport(sm, <span class="string">&quot;MoveState&quot;</span>)</span><br><span class="line">transitAndReport(sm, <span class="string">&quot;JumpState&quot;</span>)</span><br><span class="line">transitAndReport(sm, <span class="string">&quot;JumpState&quot;</span>)</span><br><span class="line">transitAndReport(sm, <span class="string">&quot;IdleState&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//封装转移状态和输出日志</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">transitAndReport</span><span class="params">(sm *StateManager, target <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := sm.Transit(target); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Failed! %s--&gt;%s, %s\n\n&quot;</span>, sm.CurrState().Name(), target, err.Error())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言学习笔记5-结构体</title>
      <link href="/2021/11/26/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05-%E7%BB%93%E6%9E%84%E4%BD%93/"/>
      <url>/2021/11/26/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05-%E7%BB%93%E6%9E%84%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="结构体">结构体</h2><blockquote><p>type 类型名 struct {<br>字段 字段类型<br>}</p></blockquote><ul><li>实例化</li></ul><ol><li>var 实例化<br><code>var ins T</code></li><li>new关键字<br><code>ins := new(T)</code></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var实例化</span></span><br><span class="line"><span class="keyword">type</span> Point <span class="keyword">struct</span>&#123;</span><br><span class="line">  x <span class="keyword">int</span></span><br><span class="line">  y <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> p Point</span><br><span class="line">p.x = <span class="number">1</span></span><br><span class="line">p.y = <span class="number">2</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//创建指针型结构体</span></span><br><span class="line"><span class="keyword">type</span> Player <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name <span class="keyword">string</span></span><br><span class="line">  Health <span class="keyword">int</span></span><br><span class="line">  Magic <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">tank := <span class="built_in">new</span>(Player)</span><br><span class="line">tank.Name = <span class="string">&quot;Canon&quot;</span></span><br><span class="line">tank.Health = <span class="number">100</span></span><br><span class="line">  </span><br><span class="line">player := &amp;Player&#123;&#125;</span><br><span class="line">player.Name = <span class="string">&quot;Azella&quot;</span></span><br><span class="line">player.Health = <span class="number">100</span></span><br></pre></td></tr></table></figure><hr><ul><li>初始化<br>结构体可以在实例化时直接对成员变量进行初始化</li></ul><ol><li>键值对</li></ol><blockquote><p>ins := 结构体类型名 {<br>字段1: 字段1值,<br>字段2: 字段2值,<br>…<br>}</p></blockquote><ol start="2"><li>列表形式<br>可以在键值对初始化的基础上忽略键<ul><li>必须初始化就够提所有字段</li><li>每一个初始值的填充顺序必须与字段在结构体中的声明顺序一致</li><li>键值对与值列表的初始化形式不能混用</li></ul></li></ol><blockquote><p>ins := 结构体类型名 {<br>字段1的值,<br>字段2的值,<br>…<br>}</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Address <span class="keyword">struct</span> &#123;</span><br><span class="line">  Province <span class="keyword">string</span></span><br><span class="line">  City <span class="keyword">string</span></span><br><span class="line">  ZipCode <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//键值对</span></span><br><span class="line">addr1 := Address &#123;</span><br><span class="line">  Province: <span class="string">&quot;四川&quot;</span></span><br><span class="line">  City: <span class="string">&quot;成都&quot;</span></span><br><span class="line">  ZipCode: <span class="number">610000</span>,</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//值列表</span></span><br><span class="line">addr2 := Address &#123;</span><br><span class="line">  <span class="string">&quot;四川&quot;</span>,</span><br><span class="line">  <span class="string">&quot;绵阳&quot;</span>,</span><br><span class="line">  <span class="number">610000</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>初始化匿名结构体<br>匿名结构体没有类型名称，无须通过type关键字定义就可以直接使用</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">msg := &amp;<span class="keyword">struct</span> &#123;      <span class="comment">//定义部分</span></span><br><span class="line">id <span class="keyword">int</span></span><br><span class="line">data <span class="keyword">string</span></span><br><span class="line">&#125;&#123;                    <span class="comment">//初始化部分</span></span><br><span class="line"><span class="number">1024</span>,</span><br><span class="line"><span class="string">&quot;hello&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">PrintMsgType(msg)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PrintMsgType</span><span class="params">(msg *<span class="keyword">struct</span>&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">id <span class="keyword">int</span></span></span></span><br><span class="line"><span class="params"><span class="function">data <span class="keyword">string</span></span></span></span><br><span class="line"><span class="params"><span class="function">&#125;)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li>构造函数<br>Go语言的类型或结构体没有构造函数的功能，结构体的初始化过程可以使用函数封装实现</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">Color <span class="keyword">string</span></span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//BlackCat嵌入Cat结构体，类似面向对象中的派生</span></span><br><span class="line"><span class="comment">//实例化时BlackCat中的Cat也会一并实例化</span></span><br><span class="line"><span class="keyword">type</span> BlackCat <span class="keyword">struct</span> &#123;</span><br><span class="line">Cat</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCat</span><span class="params">(name <span class="keyword">string</span>)</span> *<span class="title">Cat</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Cat&#123;</span><br><span class="line">Name: name,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewBlackCat</span><span class="params">(color <span class="keyword">string</span>)</span> *<span class="title">BlackCat</span></span> &#123;</span><br><span class="line">cat := &amp;BlackCat&#123;&#125;</span><br><span class="line">cat.Color = color</span><br><span class="line"><span class="keyword">return</span> cat</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li>方法<br>方法是一种作用于特定类型变量的的函数，这种特定类型变量叫做接收器<ol><li>指针类型的接收器<br>指针类型的接收器由一个结构体的指针组成，更接近于面向对象中的this或者self。调用方法时，修改接收器指针的任意成员变量，在方法结束后，修改都是有效的</li><li>非指针型的接收器<br>当方法作用于非指针接收器时，接收器的值会复制一分，在方法中可以获取接收器的成员值，但修改后无效</li><li>Go语言可以对任何类型添加方法</li></ol></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">type</span> Property <span class="keyword">struct</span> &#123;</span><br><span class="line">value <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">type</span> Point <span class="keyword">struct</span> &#123;</span><br><span class="line">x <span class="keyword">int</span></span><br><span class="line">y <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//将int定义为MyInt类型</span></span><br><span class="line"><span class="keyword">type</span> MyInt <span class="keyword">int</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//为MyInt添加方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m MyInt)</span> <span class="title">IsZero</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> m == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//非指针型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Point)</span> <span class="title">Add</span><span class="params">(other Point)</span> <span class="title">Point</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> Point&#123;</span><br><span class="line">x: p.x + other.x,</span><br><span class="line">y: p.y + other.y,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//指针型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Property)</span> <span class="title">SetValue</span><span class="params">(v <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">p.value = v</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//指针型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Property)</span> <span class="title">Value</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> p.value</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">//指针型</span></span><br><span class="line">p := <span class="built_in">new</span>(Property)</span><br><span class="line">p.SetValue(<span class="number">100</span>)</span><br><span class="line">fmt.Println(p.Value())</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//非指针型</span></span><br><span class="line">p1 := Point&#123;<span class="number">1</span>,<span class="number">1</span>&#125;</span><br><span class="line">p2 := Point&#123;<span class="number">2</span>,<span class="number">2</span>&#125;</span><br><span class="line">result := p1.Add(p2)</span><br><span class="line">fmt.Println(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li>类型内嵌和结构体内嵌<br>结构体允许其他成员字段在声明时没有字段名而只有类型，这种形式的字段被称为类型内嵌或匿名字段<br>同一个结构体重同类型的匿名字段只能有一个<ul><li>内嵌结构体可以直接访问其成员变量</li><li>内嵌结构体的字段名是他的类型名</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">type</span> BasicColor <span class="keyword">struct</span> &#123;</span><br><span class="line">R, G, B <span class="keyword">float32</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">type</span> Color <span class="keyword">struct</span> &#123;</span><br><span class="line">BasicColor</span><br><span class="line">Alpha <span class="keyword">float32</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c Color</span><br><span class="line">c.R = <span class="number">1</span></span><br><span class="line">c.G = <span class="number">1</span></span><br><span class="line">c.B = <span class="number">0</span></span><br><span class="line">c.Alpha = <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言学习笔记4-函数</title>
      <link href="/2021/11/20/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04-%E5%87%BD%E6%95%B0/"/>
      <url>/2021/11/20/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04-%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="函数">函数</h2><blockquote><p>func 函数名(参数列表) (返回参数列表) {<br>函数体<br>}</p></blockquote><ul><li>带有变量名的返回值<br>类似C#中的out，直接在函数体中对返回值进行赋值，函数结束时需要显示的使用return语句进行返回</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多返回值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">typedTwoValues</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">x, y := typedTwoValues()</span><br><span class="line">  </span><br><span class="line"><span class="comment">//带有变量名的返回值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">namedRetValues</span><span class="params">()</span> <span class="params">(a, b <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">  a = <span class="number">1</span></span><br><span class="line">  b = <span class="number">2</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>函数也是一种类型，可以被保存在变量中</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">stringProccess := <span class="function"><span class="keyword">func</span><span class="params">(list []<span class="keyword">string</span>, chain []<span class="keyword">func</span>(<span class="keyword">string</span>)</span> <span class="title">string</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> index, str := <span class="keyword">range</span> list&#123;</span><br><span class="line">result := str</span><br><span class="line"><span class="keyword">for</span> _, proc := <span class="keyword">range</span> chain&#123;</span><br><span class="line">result = proc(result)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">list[index] = result</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">removePrefix := <span class="function"><span class="keyword">func</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> strings.TrimPrefix(str, <span class="string">&quot;go&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">handleList := []<span class="keyword">string</span>&#123;</span><br><span class="line">  <span class="string">&quot;go scanner&quot;</span>,</span><br><span class="line">  <span class="string">&quot;go parser&quot;</span>,</span><br><span class="line">  <span class="string">&quot;go compiler&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">handleChain := []<span class="function"><span class="keyword">func</span> <span class="params">(<span class="keyword">string</span>)</span> <span class="title">string</span></span>&#123;</span><br><span class="line">  removePrefix,</span><br><span class="line">  strings.TrimSpace,</span><br><span class="line">  strings.ToUpper,</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">stringProccess(handleList, handleChain)</span><br></pre></td></tr></table></figure><ul><li>闭包<br>闭包是引用了自由变量的函数，被引用的自由变量和函数一同存在<br>被捕获到闭包的变量让闭包本身拥有了记忆效应</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">playerGen</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">func</span><span class="params">()</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">hp := <span class="number">150</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> name, hp</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">generator := playerGen(<span class="string">&quot;high noon&quot;</span>)</span><br><span class="line">name, hp := generator()</span><br><span class="line">fmt.Println(name, hp)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可变参数</li></ul><blockquote><p>func 函数名(固定参数列表, v …T) (返回参数列表){<br>函数体<br>}</p></blockquote><ol><li>可变参数一般放置在函数参数列表的末尾，前面是固定参数列表，当没有固定参数时，所有变量将是可变参数</li><li>可变参数变量为一个拥有多个T元素的T类型切片</li><li>T为interface{}时，传入的可以是任意类型</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(convertFunc(<span class="number">100</span>,<span class="string">&quot;str&quot;</span>, <span class="literal">true</span>))</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printTypeValue</span><span class="params">(slist ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> b bytes.Buffer</span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> _, s := <span class="keyword">range</span> slist &#123;</span><br><span class="line">str := fmt.Sprintf(<span class="string">&quot;%v&quot;</span>, s)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> typeString <span class="keyword">string</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">switch</span> s.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">bool</span>:</span><br><span class="line">typeString = <span class="string">&quot;bool&quot;</span></span><br><span class="line"><span class="keyword">case</span> <span class="keyword">string</span>:</span><br><span class="line">typeString = <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="keyword">case</span> <span class="keyword">int</span>:</span><br><span class="line">typeString = <span class="string">&quot;int&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">b.WriteString(<span class="string">&quot;value::&quot;</span>)</span><br><span class="line">b.WriteString(str)</span><br><span class="line">b.WriteString(<span class="string">&quot; type: &quot;</span>)</span><br><span class="line">b.WriteString(typeString)</span><br><span class="line">b.WriteString(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b.String()</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//传递可变参数时，在可变参数中添加&quot;...&quot;，可以将切片中的元素进行传递，而不是传递可变参数变量本身</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convertFunc</span><span class="params">(slist ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> printTypeValue(slist...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>defer<br>在defer归属的函数即将返回时，将延迟处理的语句按defer的逆序进行执行</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">valueByKey = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">valueByKeyGuard sync.Mutex</span><br><span class="line">)</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readValue</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">valueByKeyGuard.Lock()</span><br><span class="line"><span class="comment">//延迟到函数结束时调用</span></span><br><span class="line"><span class="keyword">defer</span> valueByKeyGuard.Unlock()</span><br><span class="line">  </span><br><span class="line"><span class="keyword">return</span> valueByKey[key]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>error<br>自定义错误可以通过自定义结构体实现错误接口来实现</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ParseError <span class="keyword">struct</span> &#123;</span><br><span class="line">Filename <span class="keyword">string</span></span><br><span class="line">Line <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//实现错误接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *ParseError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%s:%d&quot;</span>, e.Filename, e.Line)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newParseError</span><span class="params">(filename <span class="keyword">string</span>, line <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;ParseError&#123;filename, line&#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> e error</span><br><span class="line">e = newParseError(<span class="string">&quot;main.go&quot;</span>, <span class="number">1</span>)</span><br><span class="line">  </span><br><span class="line">fmt.Println(e.Error())</span><br><span class="line">  </span><br><span class="line"><span class="keyword">switch</span> detail := e.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> *ParseError:</span><br><span class="line">fmt.Printf(<span class="string">&quot;Filename: %s Line: %d\n&quot;</span>, detail.Filename, detail.Line)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;other error&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>panic、recover<br>手动触发宕机，让程序崩溃，可以及时的发现错误<br>当发生崩溃时，可以配合defer和recover实现错误捕捉和恢复，类似C#中的try/catch</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">type</span> PanicContext <span class="keyword">struct</span> &#123;</span><br><span class="line">function <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ProtectRun</span><span class="params">(entry <span class="keyword">func</span>()</span>)</span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := <span class="built_in">recover</span>()</span><br><span class="line">  </span><br><span class="line"><span class="keyword">switch</span> err.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> runtime.Error:</span><br><span class="line">fmt.Println(<span class="string">&quot;runtime error:&quot;</span>, err)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;error:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">  </span><br><span class="line">entry()</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ProtectRun(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(&amp;PanicContext&#123;<span class="string">&quot;手动触发panic&quot;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">  </span><br><span class="line">ProtectRun(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//模拟空指针赋值造成的错误</span></span><br><span class="line"><span class="keyword">var</span> a *<span class="keyword">int</span></span><br><span class="line">*a = <span class="number">1</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//函数会在这之前退出后继续执行</span></span><br><span class="line">fmt.Println(<span class="string">&quot;赋值宕机后&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言学习笔记3-流程控制</title>
      <link href="/2021/11/17/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
      <url>/2021/11/17/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="if">if</h2><ul><li>特殊写法<br>返回值和判断放在一行进行处理，可以将返回值的作用范围限制在if、else语句中</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err := Connect(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="for">for</h2><ul><li>普通循环</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> step := <span class="number">2</span>; step &gt; <span class="number">0</span>; setp-- &#123;</span><br><span class="line">    fmt.Println(step)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//初始语句可以忽略</span></span><br><span class="line"><span class="comment">//条件表达式也可以忽略，表示无限循环</span></span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> ; ; i++ &#123;</span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">10</span> &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//无限循环的另一种写法</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">10</span> &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    i++</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//类似C#中的while，满足条件则退出循环</span></span><br><span class="line"><span class="keyword">for</span> i &lt;= <span class="number">10</span> &#123;</span><br><span class="line">    i ++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>键值循环</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历数组切片、map</span></span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125; &#123;</span><br><span class="line">    fmt.Println(key, value)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span> &#123;</span><br><span class="line">    <span class="string">&quot;hello&quot;</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="string">&quot;world&quot;</span>: <span class="number">200</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//键或值均可缺省，缺省后不会进行空间分配</span></span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> m &#123;</span><br><span class="line">    fmt.Println(value)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//遍历通道</span></span><br><span class="line"><span class="comment">//遍历通道时只输出一个值，管道内的类型对应的数据</span></span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c &lt;- <span class="number">1</span></span><br><span class="line">    c &lt;- <span class="number">2</span></span><br><span class="line">    c &lt;- <span class="number">3</span></span><br><span class="line">    <span class="built_in">close</span>(c)</span><br><span class="line">&#125;()</span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> v := <span class="keyword">range</span> c &#123;</span><br><span class="line">    fmt.Println(v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="switch">switch</h2><ul><li>基本写法<br>switch每一个case与case间是独立的代码块，不需要通过break语句跳出当前case 代码块</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="keyword">switch</span> a &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;hello&quot;</span>:</span><br><span class="line">    fmt.Println(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;world&quot;</span>:</span><br><span class="line">    fmt.Println(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    fmt.Println(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//多个case可以放在一起</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;mum&quot;</span></span><br><span class="line"><span class="keyword">switch</span> b &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;mum&quot;</span>, <span class="string">&quot;daddy&quot;</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;family&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//case后可以添加表达式</span></span><br><span class="line"><span class="keyword">var</span> r <span class="keyword">int</span> = <span class="number">11</span></span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> r &gt; <span class="number">10</span> &amp;&amp; r &lt; <span class="number">20</span>:</span><br><span class="line">    fmt.Println(r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>为了兼容移植代码，可以使用<strong>fallthrough</strong>关键字来让case执行完后紧接着执行下一个case</li></ul><hr><h2 id="goto">goto</h2><ul><li>goto语句通过标签进行代码间的无条件跳转</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x := <span class="number">0</span>; x &lt; <span class="number">10</span>; x++ &#123;</span><br><span class="line">    <span class="keyword">for</span> y := <span class="number">0</span>; y &lt; <span class="number">10</span>; y++ &#123;</span><br><span class="line">        <span class="keyword">if</span> y == <span class="number">2</span> &#123;</span><br><span class="line">            <span class="keyword">goto</span> breakHere</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//手动返回，避免进入标签，若不返回也不影响代码执行流程</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">  </span><br><span class="line">breakHere:</span><br><span class="line">    fmt.Println(<span class="string">&quot;done&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="break">break</h2><ul><li>break可以在语句后面添加标签，表示退出某个标签对应的代码块<br>标签需定义在对应的for、switch和select的代码块上</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">OuterLoop:</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">    <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">5</span>; j++ &#123;</span><br><span class="line">        <span class="keyword">if</span> j == <span class="number">2</span> &#123;</span><br><span class="line">            <span class="keyword">break</span> OuterLoop</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="continue">continue</h2><ul><li>continue可以结束当前循环，开始下一次的循环迭代过程，仅限在for循环内使用<br>写法同break</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">OuterLoop:</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">    <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">5</span>; j ++ &#123;</span><br><span class="line">        <span class="keyword">if</span> j == <span class="number">2</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span> OuterLoop</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言学习笔记2-容器</title>
      <link href="/2021/11/16/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02-%E5%AE%B9%E5%99%A8/"/>
      <url>/2021/11/16/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02-%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="数组">数组</h2><p>和C#中的数组相同，也是一段固定长度的内存区域</p><hr><h2 id="切片">切片</h2><ol><li>切片默认指向一段连续的内存区域，可以是数组，也可以是切片本身<br><code>切片对象 [开始位置 : 结束位置]</code><ul><li>取出元素遵从左闭右开</li><li>开始位置缺省时，表示从连续区域开头到结束位置</li><li>结束位置缺省时，表示从开始位置到整个连续区域末尾</li><li>两者都缺省时，表示与切片本身等效</li><li>两者为0时，表示空切片，一般用于复位</li></ul></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">var</span> slice = a[<span class="number">1</span>:<span class="number">2</span>]</span><br></pre></td></tr></table></figure><ol start="2"><li>动态的创建一个切片可以使用 <strong>make()</strong> 内建函数<br><code>make([]T, 元素数量, 预分配元素数量)</code><br>预分配数量不影响size，只是提前分配空间，降低多从分配空间造成的性能问题</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">2</span>)</span><br><span class="line">b := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">2</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>使用内建函数 <strong>append()</strong> 可以为切片动态添加元素<br>当切片的内存空间不能容纳足够的元素时会进行扩容，容量的扩展规律按容量的2倍数扩充</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers []<span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">    numbers = <span class="built_in">append</span>(numbers, i)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//添加多个元素</span></span><br><span class="line">numbers = <span class="built_in">append</span>(numbers, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment">//添加切片</span></span><br><span class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">numbers = <span class="built_in">append</span>(numbers, slice...)</span><br></pre></td></tr></table></figure><ol start="4"><li>使用内建函数 <strong>copy()</strong> 可以将一个切片的数据复制到另外一个切片空间中<br><code>copy(目标切片, 数据来源切片) </code><br>目标切片必须分配过空间切足够承载复制的元素个数，来源和目标的类型一致,copy的返回值表示实际复制的元素个数</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> elementCount = <span class="number">10</span></span><br><span class="line">srcData := <span class="built_in">make</span>([]<span class="keyword">int</span>, elementCount)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; elementCount; i++&#123;</span><br><span class="line">    srcData[i] = i</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">copyData := <span class="built_in">make</span>(<span class="keyword">int</span>[], elementCount)</span><br><span class="line"><span class="built_in">copy</span>(copyData, srcData)</span><br></pre></td></tr></table></figure><ol start="5"><li>切片没有删除元素的内建函数，可以使用切片本身的特性来删除元素<br>以被删除元素为分界点，将前后两个部分的内存重新连接起来<br>此过程会将删除点前后的元素移动到新的位置，随着元素的增加，这个过程会变得极为耗时，对于频繁删除元素的情况应使用双链表等容器</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">seq := []<span class="keyword">string</span>&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>&#125;</span><br><span class="line">index := <span class="number">2</span></span><br><span class="line">seq = <span class="built_in">append</span>(seq[:index], seq[index+<span class="number">1</span>:]...)</span><br></pre></td></tr></table></figure><hr><h2 id="映射">映射</h2><ol><li>map的定义<br><code>map[键的类型] 值的类型</code></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">scene := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>] <span class="keyword">int</span>)</span><br><span class="line">scene[<span class="string">&quot;route&quot;</span>] = <span class="number">66</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//在申明时填充内容</span></span><br><span class="line">m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">    <span class="string">&quot;W&quot;</span>: <span class="string">&quot;forward&quot;</span>,</span><br><span class="line">    <span class="string">&quot;A&quot;</span>: <span class="string">&quot;left&quot;</span>,</span><br><span class="line">    <span class="string">&quot;S&quot;</span>: <span class="string">&quot;backward&quot;</span>,</span><br><span class="line">    <span class="string">&quot;D&quot;</span>: <span class="string">&quot;right&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用 <strong>for range</strong> 遍历map<br>map是无序的，遍历输出的顺序和填充顺序无关</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">scene := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>] <span class="keyword">int</span>)</span><br><span class="line">  </span><br><span class="line">scene[<span class="string">&quot;route&quot;</span>] = <span class="number">66</span></span><br><span class="line">scene[<span class="string">&quot;brazil&quot;</span>] = <span class="number">4</span></span><br><span class="line">scene[<span class="string">&quot;chian&quot;</span>] = <span class="number">960</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> scene&#123;</span><br><span class="line">    fmt.Println(k, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用 <strong>delete()</strong> 删除map的键值对<br><code>delete(map, 键)</code></li><li>map并没有内建的清空函数，在需要清空时重新make一个新的map即可</li><li>并发环境中使用<strong>sync.Map</strong>来替代map</li></ol><ul><li>无需初始化，声明即可用</li><li>sync.Map使用 <strong>Store</strong>(存储)、<strong>Load</strong>(获取)、<strong>Delete</strong>(删除)完成取值和设置等操作</li><li>使用<strong>Range</strong>配合回调函数进行遍历操作,回调函数返回<strong>true</strong>继续遍历，返回<strong>false</strong>终止遍历</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scene sync.Map</span><br><span class="line">  </span><br><span class="line">scene.Store(<span class="string">&quot;greece&quot;</span>, <span class="number">97</span>)</span><br><span class="line">scene.Store(<span class="string">&quot;london&quot;</span>, <span class="number">100</span>)</span><br><span class="line">scene.Store(<span class="string">&quot;egypt&quot;</span>, <span class="number">200</span>)</span><br><span class="line">fmt.Println(scene.Load(<span class="string">&quot;london&quot;</span>))</span><br><span class="line">  </span><br><span class="line">scene.Delete(<span class="string">&quot;london&quot;</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment">//遍历键值对</span></span><br><span class="line"><span class="comment">//sync.Map没有提供获取map数量的方法，使用range遍历计算数量</span></span><br><span class="line"><span class="keyword">var</span> count <span class="keyword">int</span></span><br><span class="line">scene.Range(<span class="function"><span class="keyword">func</span><span class="params">(k, v <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">bool</span></span>&#123;</span><br><span class="line">    count++</span><br><span class="line">    fmt.Println(<span class="string">&quot;interface:&quot;</span>, k, v)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">fmt.Println(<span class="string">&quot;元素数量:&quot;</span>, count)</span><br></pre></td></tr></table></figure><hr><h2 id="列表">列表</h2><ol><li>列表是一种非连续存储的容器，由多个节点组成，节点通过一些变量记录彼此之间的关系</li><li>列表的初始化<ul><li><code>变量名 := list.New()</code></li><li><code>var 变量名 list.List</code></li></ul></li><li>使用<strong>PushFront</strong>和<strong>PushBack</strong>向列表插入元素</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l := list.New()</span><br><span class="line">  </span><br><span class="line">l.PushBack(<span class="string">&quot;first&quot;</span>)</span><br><span class="line">l.pushFront(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>InsertAfter(v interface{}, mark *Element) *Element</td><td>在mark点之后插入元素，mark点由其他插入函数提供</td></tr><tr><td>IntertBefore(v interface{}, mark *Element) *Element</td><td>在mark点之前插入元素，mark点由其他插入函数提供</td></tr><tr><td>PushBackList(other *List)</td><td>添加other列表元素到尾部</td></tr><tr><td>PushFrontList(other *List)</td><td>添加other列表元素到头部</td></tr></tbody></table><ol start="4"><li>插入元素时会返回一个 *<strong>list.Element</strong> 结构,在后续删除插入的元素时只能通过 *<strong>list.Element</strong> 配合<strong>Rmove()</strong> 进行删除</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">l := list.New()</span><br><span class="line">l.PushBack(<span class="string">&quot;canon&quot;</span>)                 <span class="comment">//元素:canon</span></span><br><span class="line">l.pushFront(<span class="number">67</span>)                     <span class="comment">//元素:67, canon</span></span><br><span class="line">  </span><br><span class="line">element := l.PushBack(<span class="string">&quot;fist&quot;</span>)       <span class="comment">//元素:67, canon, fist</span></span><br><span class="line"><span class="comment">//在fist之后添加high</span></span><br><span class="line">l.InsertAfter(<span class="string">&quot;high&quot;</span>, element)      <span class="comment">//元素:67, canon, fist, high</span></span><br><span class="line"><span class="comment">//在fist之前添加noon</span></span><br><span class="line">l.InsertBefore(<span class="string">&quot;noon&quot;</span>, element)     <span class="comment">//元素:67, canon, noon, fist, high</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//删除fist</span></span><br><span class="line">l.Remove(element)                   <span class="comment">//元素:67, canon, noon, high</span></span><br></pre></td></tr></table></figure><ol start="5"><li>配合 <strong>Front()</strong> 获取头元素来进行遍历</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">l := list.New()</span><br><span class="line">l.PushBack(<span class="string">&quot;canon&quot;</span>)</span><br><span class="line">l.PushFront(<span class="number">67</span>)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> i := l.Fornt(); i != <span class="literal">nil</span>; i = i.Next() &#123;</span><br><span class="line">    fmt.Println(i.Value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言学习笔记1-基本语法</title>
      <link href="/2021/11/09/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2021/11/09/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>变量</p></blockquote><ul><li>多重赋值</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">100</span>  </span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">int</span> = <span class="number">200</span>  </span><br><span class="line">b, a = a, b  </span><br></pre></td></tr></table></figure><blockquote><p>字符串</p></blockquote><ul><li>截取字符串<br>strings.Index(): 正向搜索子字符串<br>strings.LastIndex(): 反向搜索子字符串</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tracer := <span class="string">&quot;这是什么？这是一段字符串&quot;</span></span><br><span class="line">comma := strings.Index(tracers, <span class="string">&quot;？&quot;</span>)</span><br><span class="line">pos := strings.Index(tracer[comma], <span class="string">&quot;这是&quot;</span>)</span><br><span class="line">str := tracer[comma+pos:]</span><br></pre></td></tr></table></figure><ul><li>连接字符串<br>bytes.Buffer 缓冲字符串</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">str1 := <span class="string">&quot;好好学习&quot;</span></span><br><span class="line">str2 := <span class="string">&quot;天天向上&quot;</span></span><br><span class="line"><span class="keyword">var</span> stringBuilder bytes.Buffer</span><br><span class="line">  </span><br><span class="line">stringBuilder.WriteString(str1)</span><br><span class="line">stringBuilder.WriteString(str2)</span><br><span class="line">result := stringBuilder.String()</span><br></pre></td></tr></table></figure><ul><li>格式化字符串</li></ul><table><thead><tr><th>动词</th><th>功能</th></tr></thead><tbody><tr><td>%v</td><td>按值的本来值输出</td></tr><tr><td>%+v</td><td>在%v基础上，对结构体字段名和值进行展开</td></tr><tr><td>%#v</td><td>输出GO语言语法格式的值</td></tr><tr><td>%T</td><td>输出Go语言语法格式的类型和值</td></tr><tr><td>%%</td><td>输出%本体</td></tr><tr><td>%b</td><td>整型以二进制方式显示</td></tr><tr><td>%o</td><td>整型以八进制方式显示</td></tr><tr><td>%d</td><td>整型以十进制方式显示</td></tr><tr><td>%x</td><td>整型以十六进制方式显示</td></tr><tr><td>%X</td><td>整型以十六进制、字母大写方式显示</td></tr><tr><td>%U</td><td>Unicode字符</td></tr><tr><td>%f</td><td>浮点数</td></tr><tr><td>%p</td><td>指针，十六进制方式显示</td></tr></tbody></table><blockquote><p>常量</p></blockquote><ul><li>枚举<br>用常量配合iota实现枚举<br>iota:常量计数器，常量中每新增一行iota将计数一次</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ItemType <span class="keyword">int</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Weapon ItemType = <span class="literal">iota</span></span><br><span class="line">    Consumables</span><br><span class="line">    Material</span><br><span class="line">    SkillBook</span><br><span class="line">)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> Itemtype itemType = Weapon</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    FlagNone = <span class="number">1</span> &lt;&lt; <span class="literal">iota</span></span><br><span class="line">    FlagRed</span><br><span class="line">    FlagGreen</span><br><span class="line">    FlagBlue</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>枚举值转字符串</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(item ItemType)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> item &#123;</span><br><span class="line">        <span class="keyword">case</span> Weapon:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;武器&quot;</span></span><br><span class="line">        <span class="keyword">case</span> Consumables:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;消耗品&quot;</span></span><br><span class="line">        <span class="keyword">case</span> Material:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;材料&quot;</span></span><br><span class="line">        <span class="keyword">case</span> SkillBook:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;技能书&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;N/A&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">name := itemType.String()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FirstBlogs</title>
      <link href="/2021/05/16/FirstBlogs/"/>
      <url>/2021/05/16/FirstBlogs/</url>
      
        <content type="html"><![CDATA[<p>这是我的第一篇博客</p><p>这是一个测试</p>]]></content>
      
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
